// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: trip.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTrip = `-- name: CreateTrip :one
INSERT INTO trips (
    start_date,
    start_location,
    end_location,
    end_date,
    distance_travelled,
    user_id
) VALUES (
$1,
$2,
$3,
$4,
$5,
$6
)
RETURNING  id
`

type CreateTripParams struct {
	StartDate         time.Time
	StartLocation     interface{}
	EndLocation       interface{}
	EndDate           sql.NullTime
	DistanceTravelled sql.NullFloat64
	UserID            uuid.UUID
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createTrip,
		arg.StartDate,
		arg.StartLocation,
		arg.EndLocation,
		arg.EndDate,
		arg.DistanceTravelled,
		arg.UserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteTrip = `-- name: DeleteTrip :exec
DELETE FROM trips
WHERE  id = $1
`

func (q *Queries) DeleteTrip(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTrip, id)
	return err
}

const getTrip = `-- name: GetTrip :one
SELECT 
  id,
  start_date,
  end_date,
  distance_travelled,
  created_at,
  updated_at,
  user_id,
  ST_Y(start_location::geometry) AS start_lat,
  ST_X(start_location::geometry) AS start_lng,
  ST_Y(end_location::geometry) AS end_lat,
  ST_X(end_location::geometry) AS end_lng
FROM trips
WHERE user_id = $1 AND id = $2
`

type GetTripParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

type GetTripRow struct {
	ID                uuid.UUID
	StartDate         time.Time
	EndDate           sql.NullTime
	DistanceTravelled sql.NullFloat64
	CreatedAt         time.Time
	UpdatedAt         time.Time
	UserID            uuid.UUID
	StartLat          interface{}
	StartLng          interface{}
	EndLat            interface{}
	EndLng            interface{}
}

func (q *Queries) GetTrip(ctx context.Context, arg GetTripParams) (GetTripRow, error) {
	row := q.db.QueryRowContext(ctx, getTrip, arg.UserID, arg.ID)
	var i GetTripRow
	err := row.Scan(
		&i.ID,
		&i.StartDate,
		&i.EndDate,
		&i.DistanceTravelled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.StartLat,
		&i.StartLng,
		&i.EndLat,
		&i.EndLng,
	)
	return i, err
}

const getTripDistance = `-- name: GetTripDistance :one
SELECT ST_Distance(start_location, end_location) AS distance 
FROM trips WHERE id = $1
`

func (q *Queries) GetTripDistance(ctx context.Context, id uuid.UUID) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getTripDistance, id)
	var distance interface{}
	err := row.Scan(&distance)
	return distance, err
}

const getTrips = `-- name: GetTrips :many
SELECT   
  id,
  start_date,
  end_date,
  distance_travelled,
  created_at,
  updated_at,
  user_id,
  ST_Y(start_location::geometry) AS start_lat,
  ST_X(start_location::geometry) AS start_lng,
  ST_Y(end_location::geometry) AS end_lat,
  ST_X(end_location::geometry) AS end_lng
FROM trips 
WHERE user_id = $1
`

type GetTripsRow struct {
	ID                uuid.UUID
	StartDate         time.Time
	EndDate           sql.NullTime
	DistanceTravelled sql.NullFloat64
	CreatedAt         time.Time
	UpdatedAt         time.Time
	UserID            uuid.UUID
	StartLat          interface{}
	StartLng          interface{}
	EndLat            interface{}
	EndLng            interface{}
}

func (q *Queries) GetTrips(ctx context.Context, userID uuid.UUID) ([]GetTripsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTrips, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTripsRow
	for rows.Next() {
		var i GetTripsRow
		if err := rows.Scan(
			&i.ID,
			&i.StartDate,
			&i.EndDate,
			&i.DistanceTravelled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.StartLat,
			&i.StartLng,
			&i.EndLat,
			&i.EndLng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrip = `-- name: UpdateTrip :one
UPDATE trips
SET
    end_location = $1,
    end_date = $2,
    distance_travelled = $3,
    updated_at = $4
WHERE
    id = $5 
RETURNING  id
`

type UpdateTripParams struct {
	EndLocation       interface{}
	EndDate           sql.NullTime
	DistanceTravelled sql.NullFloat64
	UpdatedAt         time.Time
	ID                uuid.UUID
}

func (q *Queries) UpdateTrip(ctx context.Context, arg UpdateTripParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateTrip,
		arg.EndLocation,
		arg.EndDate,
		arg.DistanceTravelled,
		arg.UpdatedAt,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
