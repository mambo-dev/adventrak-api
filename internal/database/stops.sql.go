// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stops.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStop = `-- name: CreateStop :one
INSERT INTO trip_stop (
    location_name,
    location_tag,
    trip_id
)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id
`

type CreateStopParams struct {
	LocationName string
	LocationTag  interface{}
	TripID       uuid.UUID
}

func (q *Queries) CreateStop(ctx context.Context, arg CreateStopParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createStop, arg.LocationName, arg.LocationTag, arg.TripID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteStop = `-- name: DeleteStop :exec
DELETE FROM trip_stop 
WHERE id = $1 AND user_id = $2
`

type DeleteStopParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteStop(ctx context.Context, arg DeleteStopParams) error {
	_, err := q.db.ExecContext(ctx, deleteStop, arg.ID, arg.UserID)
	return err
}

const getStop = `-- name: GetStop :one
SELECT
    id,
    location_name,
    created_at,
    ST_Y(location_tag::geometry) AS end_lat,
    ST_X(location_tag::geometry) AS end_lng
FROM trip_stop
WHERE user_id = $1 AND id = $2
`

type GetStopParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

type GetStopRow struct {
	ID           uuid.UUID
	LocationName string
	CreatedAt    time.Time
	EndLat       interface{}
	EndLng       interface{}
}

func (q *Queries) GetStop(ctx context.Context, arg GetStopParams) (GetStopRow, error) {
	row := q.db.QueryRowContext(ctx, getStop, arg.UserID, arg.ID)
	var i GetStopRow
	err := row.Scan(
		&i.ID,
		&i.LocationName,
		&i.CreatedAt,
		&i.EndLat,
		&i.EndLng,
	)
	return i, err
}

const getStops = `-- name: GetStops :many
SELECT
    id,
    location_name,
    created_at,
    ST_Y(location_tag::geometry) AS end_lat,
    ST_X(location_tag::geometry) AS end_lng
FROM trip_stop
WHERE trip_id = $1 AND user_id = $2
`

type GetStopsParams struct {
	TripID uuid.UUID
	UserID uuid.UUID
}

type GetStopsRow struct {
	ID           uuid.UUID
	LocationName string
	CreatedAt    time.Time
	EndLat       interface{}
	EndLng       interface{}
}

func (q *Queries) GetStops(ctx context.Context, arg GetStopsParams) ([]GetStopsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStops, arg.TripID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStopsRow
	for rows.Next() {
		var i GetStopsRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationName,
			&i.CreatedAt,
			&i.EndLat,
			&i.EndLng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStop = `-- name: UpdateStop :one
UPDATE trip_stop
SET location_name = $1, location_tag= $2
WHERE id = $3 AND user_id = $4
RETURNING id
`

type UpdateStopParams struct {
	LocationName string
	LocationTag  interface{}
	ID           uuid.UUID
	UserID       uuid.UUID
}

func (q *Queries) UpdateStop(ctx context.Context, arg UpdateStopParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateStop,
		arg.LocationName,
		arg.LocationTag,
		arg.ID,
		arg.UserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
