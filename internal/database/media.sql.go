// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: media.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTripMedia = `-- name: CreateTripMedia :one
INSERT INTO trip_media(trip_id, trip_stop_id, photo_url, video_url, user_id)
VALUES(
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, trip_id, trip_stop_id, photo_url, video_url, created_at, updated_at, user_id
`

type CreateTripMediaParams struct {
	TripID     uuid.NullUUID
	TripStopID uuid.NullUUID
	PhotoUrl   sql.NullString
	VideoUrl   sql.NullString
	UserID     uuid.UUID
}

func (q *Queries) CreateTripMedia(ctx context.Context, arg CreateTripMediaParams) (TripMedium, error) {
	row := q.db.QueryRowContext(ctx, createTripMedia,
		arg.TripID,
		arg.TripStopID,
		arg.PhotoUrl,
		arg.VideoUrl,
		arg.UserID,
	)
	var i TripMedium
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.TripStopID,
		&i.PhotoUrl,
		&i.VideoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteTripMedia = `-- name: DeleteTripMedia :exec
DELETE FROM trip_media
WHERE id = $1 AND user_id = $2
`

type DeleteTripMediaParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteTripMedia(ctx context.Context, arg DeleteTripMediaParams) error {
	_, err := q.db.ExecContext(ctx, deleteTripMedia, arg.ID, arg.UserID)
	return err
}

const getTripMediaById = `-- name: GetTripMediaById :one
SELECT id, trip_id, trip_stop_id, photo_url, video_url, created_at, updated_at, user_id FROM trip_media
WHERE id = $1 AND user_id = $2
`

type GetTripMediaByIdParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) GetTripMediaById(ctx context.Context, arg GetTripMediaByIdParams) (TripMedium, error) {
	row := q.db.QueryRowContext(ctx, getTripMediaById, arg.ID, arg.UserID)
	var i TripMedium
	err := row.Scan(
		&i.ID,
		&i.TripID,
		&i.TripStopID,
		&i.PhotoUrl,
		&i.VideoUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getTripMediaByTripOrStopID = `-- name: GetTripMediaByTripOrStopID :many
SELECT id, trip_id, trip_stop_id, photo_url, video_url, created_at, updated_at, user_id FROM trip_media
WHERE trip_id = $1 OR trip_stop_id = $2 AND user_id = $3
`

type GetTripMediaByTripOrStopIDParams struct {
	TripID     uuid.NullUUID
	TripStopID uuid.NullUUID
	UserID     uuid.UUID
}

func (q *Queries) GetTripMediaByTripOrStopID(ctx context.Context, arg GetTripMediaByTripOrStopIDParams) ([]TripMedium, error) {
	rows, err := q.db.QueryContext(ctx, getTripMediaByTripOrStopID, arg.TripID, arg.TripStopID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TripMedium
	for rows.Next() {
		var i TripMedium
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.TripStopID,
			&i.PhotoUrl,
			&i.VideoUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTripMedia = `-- name: UpdateTripMedia :one
UPDATE trip_media
SET photo_url = $1, video_url = $2, updated_at = NOW()
WHERE id = $3 AND user_id = $4
RETURNING id
`

type UpdateTripMediaParams struct {
	PhotoUrl sql.NullString
	VideoUrl sql.NullString
	ID       uuid.UUID
	UserID   uuid.UUID
}

func (q *Queries) UpdateTripMedia(ctx context.Context, arg UpdateTripMediaParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, updateTripMedia,
		arg.PhotoUrl,
		arg.VideoUrl,
		arg.ID,
		arg.UserID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
